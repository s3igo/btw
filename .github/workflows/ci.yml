name: CI

on:
  pull_request:
    paths-ignore:
      - README.md
      - LICENSE
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - LICENSE

env:
  NIX_SYSTEM: x86_64-linux

jobs:
  generate-matrix:
    runs-on: ubuntu-24.04
    timeout-minutes: 12
    outputs:
      checks: ${{ steps.define.outputs.checks }}
      exes: ${{ steps.define.outputs.exes }}
      images: ${{ steps.define.outputs.images }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Define matrix
        id: define
        # Due to the requirements of the checks-build-image job, images must be
        # a subset of exes
        run: |
          CHECKS="$(nix flake show --json \
            | jq --compact-output '.checks["${{ env.NIX_SYSTEM }}"] | keys')"
          {
            echo "checks=$CHECKS"
            echo 'exes=["native", "glibc", "musl"]'
            echo 'images=["glibc", "musl"]'
          } >> "$GITHUB_OUTPUT"

  pre-checks:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Cache built deps
        uses: ./.github/actions/cache
        with:
          package: .#_deps
          skip-on-cache-hit: "true"

  checks:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs:
      - generate-matrix
      - pre-checks
    strategy:
      matrix:
        check: ${{ fromJSON(needs.generate-matrix.outputs.checks) }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Cache built deps
        uses: ./.github/actions/cache
        with:
          package: .#_deps
      - name: Cache built check
        uses: ./.github/actions/cache
        with:
          package: .#checks.${{ env.NIX_SYSTEM }}.${{ matrix.check }}
          skip-on-cache-hit: "true"

  checks-build-exe:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs:
      - generate-matrix
      - pre-checks
    strategy:
      matrix:
        exe: ${{ fromJSON(needs.generate-matrix.outputs.exes) }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Cache built deps
        uses: ./.github/actions/cache
        with:
          package: .#_deps
      - name: Cache built exe
        uses: ./.github/actions/cache
        with:
          package: .#btw-${{ matrix.exe }}
          skip-on-cache-hit: "true"

  checks-build-image:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs:
      - generate-matrix
      - checks-build-exe
    strategy:
      matrix:
        image: ${{ fromJSON(needs.generate-matrix.outputs.images) }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Cache built exe
        uses: ./.github/actions/cache
        with:
          package: .#btw-${{ matrix.image }}
      - name: Cache built image
        uses: ./.github/actions/cache
        with:
          package: .#btw-${{ matrix.image }}-image
          skip-on-cache-hit: "true"

  deploy:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs:
      - checks
      - checks-build-image
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
      - name: Set data for subsequent steps
        id: data
        run: |
          VERSION="$(nix eval --raw -- .#metadata.cargo.package.version)"
          echo "image=registry.fly.io/btw:$VERSION-glibc" >> "$GITHUB_OUTPUT"
      - name: Cache built image
        uses: ./.github/actions/cache
        with:
          package: .#btw-glibc-image
      - run: nix build .#btw-glibc-image
      - name: Push image to Fly.io registry
        # --insecure-policy:
        #   Don't look for `policy.json` file in local filesystem
        run: >
          nix run --inputs-from . nixpkgs#skopeo --
          --insecure-policy
          copy
          --format v2s2
          --dest-creds x:${{ secrets.FLY_ACCESS_TOKEN }}
          -- docker-archive:result
          docker://${{ steps.data.outputs.image }}
      - name: Deploy image from Fly.io registry
        run: >
          nix run --inputs-from . nixpkgs#flyctl --
          deploy
          --remote-only
          --image ${{ steps.data.outputs.image }}
        env:
          FLY_ACCESS_TOKEN: ${{ secrets.FLY_ACCESS_TOKEN }}
